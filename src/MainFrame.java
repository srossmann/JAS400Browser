
import java.awt.Component;
import java.awt.Cursor;
import java.awt.Point;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.Writer;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Properties;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.event.CellEditorListener;
import javax.swing.event.ChangeEvent;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CreationHelper;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Rossmann
 */
public class MainFrame extends javax.swing.JFrame {
//******************************************************************************
// Version 0.9.2
// 1234
//
//******************************************************************************

    myTable jTable3;
    java.awt.Frame myMainFrame;

    int edtCol = 0;
    int edtRow = 0;
    String altValue = "";
    String neuValue = "";

    String AS400Schemaname = "";
    String AS400Tabellenname = "";
    String AS400User = "";
    String AS400Passwort = "";
    String AS400IPAdresse = "";
    TabellenStructurTableModell TabellenStrucktur;
    DefaultListModel listenModell = new DefaultListModel();

    String SelectText = "";

    public AS400 myAS400 = null;

    int Versionsnummer = 0;

//******************************************************************************
//  Erzeugt ein neues MainFrame
//
//
//******************************************************************************
    public MainFrame(int Versio) {
        Versionsnummer = Versio;
        initComponents();
        myMainFrame = this;
        JTableHeader header = jTable2.getTableHeader();
        header.addMouseListener(new TableHeaderMouseListenerChecket(jTable2));

        String s = String.valueOf(Versio);

        jMenueVersion.setText("Version " + s);

        LadeParametrer();

    }

    private void LadeParametrer() {

        try {
            Properties properties = new Properties();
            try (BufferedInputStream stream = new BufferedInputStream(new FileInputStream("JAS400Browser.Properties"))) {
                properties.load(stream);
            }
            AS400Schemaname = properties.getProperty("Schema");
            AS400Tabellenname = properties.getProperty("Tabelle");
            AS400User = properties.getProperty("User");
            AS400IPAdresse = properties.getProperty("IPAdresse");

        } catch (IOException e) {
        }
    }

    private void SpeicherParametrer() {
        try {
            Properties properties = new Properties();
            properties.setProperty("Schema", AS400Schemaname);
            properties.setProperty("Tabelle", AS400Tabellenname);
            properties.setProperty("User", AS400User);
            properties.setProperty("IPAdresse", AS400IPAdresse);
            try (BufferedOutputStream stream = new BufferedOutputStream(new FileOutputStream("JAS400Browser.Properties"))) {
                properties.save(stream, "Datum");
            }

        } catch (IOException e) {
        }
    }
//******************************************************************************
//
//
//
//******************************************************************************

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        jSplitPane3 = new javax.swing.JSplitPane();
        jSplitPane4 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jButton8 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jCheckBox1 = new javax.swing.JCheckBox();
        jButton1 = new javax.swing.JButton();
        btnEditTabelle = new javax.swing.JToggleButton();
        btnAddData = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        btnSelectData = new javax.swing.JToggleButton();
        jLabel2 = new javax.swing.JLabel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel9 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jPanel10 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        jPanel5 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jComboBox1 = new javax.swing.JComboBox();
        jTextField4 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton5 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        jMenu1 = new javax.swing.JMenu();
        jMenueVersion = new javax.swing.JMenu();

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("AS400 Browser for the Arbeitserleichterung ");
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jSplitPane3.setDividerLocation(300);
        jSplitPane3.setOneTouchExpandable(true);

        jSplitPane4.setDividerLocation(201);
        jSplitPane4.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane4.setOneTouchExpandable(true);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText(" ");
        jLabel1.setToolTipText("");

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/file_edit.png"))); // NOI18N
        jButton4.setLabel("<html>Struktur<p>nach Excel</html>");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jTextField2.setBackground(new java.awt.Color(153, 255, 255));
        jTextField2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jTextField2.setNextFocusableComponent(jTextField3);
        jTextField2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField2KeyPressed(evt);
            }
        });

        jTextField3.setBackground(new java.awt.Color(153, 255, 255));
        jTextField3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jTextField3.setNextFocusableComponent(jButton2);
        jTextField3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField3KeyPressed(evt);
            }
        });

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/search.png"))); // NOI18N
        jButton2.setText("suchen");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setText("Bibliothek");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel4.setText("Tabelle");

        jButton8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/printer.png"))); // NOI18N
        jButton8.setText("<html>Struktur<p>drucken</html>");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/file_edit.png"))); // NOI18N
        jButton7.setEnabled(false);
        jButton7.setLabel("<html>MEMBER<p>drucken</html>");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(138, 138, 138))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextField2)
                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 53, Short.MAX_VALUE))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton8)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton4)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jButton7))
                .addGap(16, 16, 16))
        );

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTable2.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTable2.setCellSelectionEnabled(true);
        jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable2MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable2);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jScrollPane2)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 82, Short.MAX_VALUE))
        );

        jSplitPane4.setLeftComponent(jPanel1);

        jTextField1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField1KeyPressed(evt);
            }
        });

        jCheckBox1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jCheckBox1.setSelected(true);
        jCheckBox1.setText("max 100 Datensätze");

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/recycle.png"))); // NOI18N
        jButton1.setText("<html>Ansicht<p>laden</html>");
        jButton1.setToolTipText("");
        jButton1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jButton1.setIconTextGap(1);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        btnEditTabelle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/edit.png"))); // NOI18N
        btnEditTabelle.setText("<html>Tabelle<p>bearbeiten</html>");
        btnEditTabelle.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnEditTabelle.setIconTextGap(0);
        btnEditTabelle.setMinimumSize(new java.awt.Dimension(100, 50));
        btnEditTabelle.setPreferredSize(new java.awt.Dimension(120, 57));
        btnEditTabelle.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/Achtung.png"))); // NOI18N
        btnEditTabelle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditTabelleActionPerformed(evt);
            }
        });

        btnAddData.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/files_add.png"))); // NOI18N
        btnAddData.setText("<html>Datensatz<p>hinzufügen</html>");
        btnAddData.setToolTipText("");
        btnAddData.setEnabled(false);
        btnAddData.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        btnAddData.setIconTextGap(1);
        btnAddData.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAddDataMouseClicked(evt);
            }
        });
        btnAddData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddDataActionPerformed(evt);
            }
        });

        jButton6.setText("löschen");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        btnSelectData.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/ok.png"))); // NOI18N
        btnSelectData.setText("<html>Datensatz<p>auswählen</html>");
        btnSelectData.setEnabled(false);
        btnSelectData.setIconTextGap(1);
        btnSelectData.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/file_remove.png"))); // NOI18N
        btnSelectData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectDataActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("2345");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(btnEditTabelle, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAddData, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSelectData, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBox1)
                            .addComponent(jLabel2))
                        .addGap(0, 43, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jTextField1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnEditTabelle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnAddData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnSelectData))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jCheckBox1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jSplitPane1.setDividerLocation(400);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane1.setOneTouchExpandable(true);

        jScrollPane4.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane4.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 828, Short.MAX_VALUE)
            .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel9Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 808, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 276, Short.MAX_VALUE)
            .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel9Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 254, Short.MAX_VALUE)
                    .addContainerGap()))
        );

        jSplitPane1.setTopComponent(jPanel9);

        jScrollPane3.setViewportView(jList1);

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 818, Short.MAX_VALUE))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 83, Short.MAX_VALUE)
        );

        jSplitPane1.setBottomComponent(jPanel10);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 306, Short.MAX_VALUE)
                .addContainerGap())
        );

        jSplitPane4.setRightComponent(jPanel3);

        jSplitPane3.setRightComponent(jSplitPane4);

        jComboBox1.setBackground(new java.awt.Color(255, 204, 204));
        jComboBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox1ItemStateChanged(evt);
            }
        });
        jComboBox1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jComboBox1MouseClicked(evt);
            }
        });
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        jComboBox1.addVetoableChangeListener(new java.beans.VetoableChangeListener() {
            public void vetoableChange(java.beans.PropertyChangeEvent evt)throws java.beans.PropertyVetoException {
                jComboBox1VetoableChange(evt);
            }
        });

        jTextField4.setToolTipText("");
        jTextField4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField4KeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBox1, 0, 289, Short.MAX_VALUE)
                    .addComponent(jTextField4)))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 537, Short.MAX_VALUE)
                .addContainerGap())
        );

        jSplitPane3.setLeftComponent(jPanel5);

        jButton5.setText("jButton5");

        jMenu2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/connect.png"))); // NOI18N
        jMenu2.setText("Logout");
        jMenu2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jMenu2.setPreferredSize(new java.awt.Dimension(150, 48));
        jMenu2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu2MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu2);

        jMenu1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/info.png"))); // NOI18N
        jMenu1.setText("Info");
        jMenu1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jMenu1.setPreferredSize(new java.awt.Dimension(150, 48));
        jMenu1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu1MouseClicked(evt);
            }
        });
        jMenu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu1ActionPerformed(evt);
            }
        });
        jMenuBar1.add(jMenu1);

        jMenueVersion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/ahmad hania logo.png"))); // NOI18N
        jMenueVersion.setText("Version X");
        jMenueVersion.setFocusCycleRoot(true);
        jMenueVersion.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jMenueVersion.setPreferredSize(new java.awt.Dimension(150, 48));
        jMenueVersion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenueVersionActionPerformed(evt);
            }
        });
        jMenuBar1.add(jMenueVersion);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane3)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane3)
        );

        setSize(new java.awt.Dimension(1152, 718));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
//******************************************************************************
//
//
//
//******************************************************************************

    private void TableDesign(JTable Table) {
        if (Table == jTable1) {
            Table.getColumnModel().getColumn(0).setPreferredWidth(150);
            Table.getColumnModel().getColumn(1).setPreferredWidth(300);
            Table.getColumnModel().getColumn(0).setHeaderValue("Tabelle");
            Table.getColumnModel().getColumn(1).setHeaderValue("Bezeichnung");
            Table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        }
        if (Table == jTable2) {
            Table.getColumnModel().getColumn(0).setPreferredWidth(30);
            Table.getColumnModel().getColumn(1).setPreferredWidth(100);
            Table.getColumnModel().getColumn(5).setPreferredWidth(300);
            Table.getColumnModel().getColumn(0).setHeaderValue(" ");
            Table.getColumnModel().getColumn(1).setHeaderValue("Feldname");
            Table.getColumnModel().getColumn(2).setHeaderValue("Typ");
            Table.getColumnModel().getColumn(3).setHeaderValue("Len");
            Table.getColumnModel().getColumn(4).setHeaderValue("Dec");
            Table.getColumnModel().getColumn(5).setHeaderValue("Bezeichnung");
            Table.getColumnModel().getColumn(6).setHeaderValue("Keyfolge");
            Table.getColumnModel().getColumn(7).setHeaderValue("Keyrichtung");

        }
    }
//******************************************************************************
//
//
//
//******************************************************************************
    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown

    }//GEN-LAST:event_formComponentShown

//******************************************************************************
//
//
//
//******************************************************************************
    private void StartSchema() {
        this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        ResultSet rs = myAS400.getSchema();
        try {
            while (rs.next()) {
                String s = String.format("<html><b> %-10s </b><p> %s</html>", rs.getString(1), rs.getString(2));
                jComboBox1.addItem(s);
            }
            rs.close();
        } catch (SQLException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);

        }

        LadeParametrer();
        findSchema(AS400Schemaname);
        this.setCursor(Cursor.getDefaultCursor());
        //  LadeGrid();
    }
//******************************************************************************
//
//
//
//******************************************************************************
    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        LadeDatenTabelle();
    }//GEN-LAST:event_jTable1MouseClicked

//******************************************************************************
//
//
//
//******************************************************************************    
    private void LadeDatenTabelle() {
        if (btnEditTabelle.isSelected()) {
            btnEditTabelle.setSelected(false);
            setEditModus();
        }

        SelectText = "";
        jTextField1.setText(SelectText);
        jCheckBox1.setSelected(true);

        LadeTabelle();
    }
//******************************************************************************
//
//
//
//******************************************************************************
    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed

    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        SpeicherParametrer();
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowClosing

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        DatenNeuLaden();  // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jComboBox1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBox1MouseClicked
    }//GEN-LAST:event_jComboBox1MouseClicked

    private void jComboBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox1ItemStateChanged
        AS400Tabellenname = "";
        jTextField3.setText("");

        JComboBox<?> sel = (JComboBox<?>) evt.getSource();
        String s[] = sel.getSelectedItem().toString().split(" ");
        if (!AS400Schemaname.equals(s[1])) {
            AS400Schemaname = s[1];
            LadeGrid(AS400Schemaname);        // TODO add your handling code here:        // TODO add your handling code here:

        }
    }//GEN-LAST:event_jComboBox1ItemStateChanged

    private void jComboBox1VetoableChange(java.beans.PropertyChangeEvent evt)throws java.beans.PropertyVetoException {//GEN-FIRST:event_jComboBox1VetoableChange

    }//GEN-LAST:event_jComboBox1VetoableChange

    private void jMenu2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu2MouseClicked
        System.exit(0);
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu2MouseClicked

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        LoginDialog LogInDlg = new LoginDialog(this, true);
        LogInDlg.jFormattedTextField1.setText(AS400IPAdresse);
        LogInDlg.jTextField1.setText(AS400User);
        LogInDlg.setVisible(true);

        AS400IPAdresse = LogInDlg.jFormattedTextField1.getText();
        AS400User = LogInDlg.jTextField1.getText();
        AS400Passwort = new String(LogInDlg.jPasswordField1.getPassword());
        if (AS400Passwort.length() > 0) {
            myAS400 = new AS400();

            myAS400.Connect(AS400IPAdresse, AS400User, AS400Passwort);

            SpeicherParametrer();

            StartSchema();
        } else {
            dispose();
            System.exit(0);

        }

    }//GEN-LAST:event_formWindowOpened

    private void jMenu1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu1MouseClicked
        InfoDialog InfoDlg = new InfoDialog(this, true);
        InfoDlg.setVisible(true);


    }//GEN-LAST:event_jMenu1MouseClicked

    private void jTextField1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            DatenNeuLaden();
        }
    }//GEN-LAST:event_jTextField1KeyPressed


    private void jMenu1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu1ActionPerformed
    }//GEN-LAST:event_jMenu1ActionPerformed

    private void setEditModus() {
        //jButton1.setEnabled(!jToggleButton1.isSelected());
        //btnAddData.setEnabled(btnEditTabelle.isSelected());
        //btnSelectData.setEnabled(btnEditTabelle.isSelected());
        if (btnEditTabelle.isSelected()) {
            btnAddData.setEnabled(true);
            btnSelectData.setEnabled(true);
            LogInfo("Bearbeitungs Modus ein");
            btnEditTabelle.setText("<html>bearbeitung<p>stoppen</html>");
            jTable3.setEnabled(true);
        } else {
            btnAddData.setEnabled(false);
            btnSelectData.setEnabled(false);
            btnSelectData.setSelected(false);
            btnSelectData.setText("<html>Datensatz<p>auswählen</html>");
            LogInfo("Bearbeitungs Modus aus");
            DatenNeuLaden();
            btnEditTabelle.setText("<html>Daten<p>bearbeiten</html>");
            jTable3.setEnabled(false);
            btnSelectData.setSelected(false);
            int i = okcancel("Wollen Sie das Protokoll speichern ?");
            if (i == JOptionPane.YES_OPTION) {
                speicherProtokoll();
            }
        }
    }

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        AS400Schemaname = jTextField2.getText();
        String lAS400Tabellenname = jTextField3.getText();
        findSchema(AS400Schemaname);
        AS400Tabellenname = lAS400Tabellenname;
        findTable(AS400Tabellenname);        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTextField2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField2KeyPressed
        if (evt.getKeyCode() == 10) {
            AS400Schemaname = jTextField2.getText();
            findSchema(AS400Schemaname);
            jTextField3.requestFocusInWindow();
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2KeyPressed

    private void jTextField3KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField3KeyPressed
        if (evt.getKeyCode() == 10) {
            AS400Schemaname = jTextField2.getText();
            String lAS400Tabellenname = jTextField3.getText();
            findSchema(AS400Schemaname);
            AS400Tabellenname = lAS400Tabellenname;
            findTable(AS400Tabellenname);        // TODO add your handling code here:

//            AS400Schemaname = jTextField2.getText();
//            AS400Tabellenname = jTextField3.getText();
//            findTable(AS400Tabellenname);          // TODO add your handling code here:
        }
    }//GEN-LAST:event_jTextField3KeyPressed

    private void btnAddDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddDataActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnAddDataActionPerformed


    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        jTextField1.setText("");
    }//GEN-LAST:event_jButton6ActionPerformed

    private void select_row() {
        if (btnSelectData.isSelected()) {
            jTable3.setCellSelectionEnabled(false);
            jTable3.setRowSelectionAllowed(true);
            LogInfo("Datensatz selectieren");
            btnSelectData.setText("<html>Datensatz<p>löschen</html>");
//            jToggleButton2.setBackground(Color.getHSBColor(255, 153, 51));
            jTable3.setEnabled(true);
        } else {
            LogInfo("Datensatz löschen");
            int i = okcancel("Wollen Sie den Datensatz wirklich löschen ?");
            if (i == JOptionPane.YES_OPTION) {
                DefaultTableModel tm = (DefaultTableModel) jTable3.getModel();
                DeleteDatenSatz(tm);
            }
            jTable3.setCellSelectionEnabled(true);
            jTable3.setRowSelectionAllowed(false);
            btnSelectData.setText("<html>Datensatz<p>auswählen</html>");
//            jToggleButton2.setBackground(Color.getHSBColor(240, 240, 240));

            DatenNeuLaden();
        }        // TODO add your handling code here:
    }

    private void btnEditTabelleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditTabelleActionPerformed
        btnEditTabelle.requestFocus();
        setEditModus();
    }//GEN-LAST:event_btnEditTabelleActionPerformed

    private void btnSelectDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectDataActionPerformed
        select_row();
    }//GEN-LAST:event_btnSelectDataActionPerformed

    private void jTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseClicked
        int irow = jTable2.getSelectedRow();
        boolean b1 = (boolean) jTable2.getValueAt(irow, 0);
        if (b1) {
            jTable2.setValueAt(false, irow, 0);
        } else {
            jTable2.setValueAt(true, irow, 0);
        }
    }//GEN-LAST:event_jTable2MouseClicked

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        myAS400.druckeTabellenStrucktur(AS400Schemaname, AS400Tabellenname);
// TODO add your handling code here:
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        myAS400.ExcelTabellenStrucktur(AS400Schemaname, AS400Tabellenname);

    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        PrintMember mbr = new PrintMember(this, true, myAS400, AS400Schemaname, AS400Tabellenname);
        mbr.setVisible(true);

        myAS400.druckeMember(mbr.member);

    }//GEN-LAST:event_jButton7ActionPerformed

    private void jMenueVersionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenueVersionActionPerformed


    }//GEN-LAST:event_jMenueVersionActionPerformed

    private void btnAddDataMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAddDataMouseClicked

        int i = okcancel("Wollen einen Datensatz wirklich hinzfügen ?");
        if (i == JOptionPane.YES_OPTION) {
            DefaultTableModel tm = (DefaultTableModel) jTable3.getModel();
            InsertDaten(tm);

            String a = GetWhere(tm);
            LadeTabellenDaten(AS400Tabellenname, a);
            jTable3.setEnabled(true);
        }
    }//GEN-LAST:event_btnAddDataMouseClicked

    private void jTextField4KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField4KeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
           LadeGrid(AS400Schemaname);        // TODO add your handling code here:        // TODO add your handling code here:
        }
    }//GEN-LAST:event_jTextField4KeyPressed

//******************************************************************************
//
//
//
//******************************************************************************
    private void speicherProtokoll() {

        SimpleDateFormat sdf = new SimpleDateFormat("dd_mm_yyyy_HH_mm_ss");
        String uhrzeit = sdf.format(new Date());

        String Name = "Protokoll-" + AS400Schemaname + "-" + AS400Tabellenname + "-" + uhrzeit + ".txt";
        String Datei = saveAs(Name);
        Writer fw = null;

        try {
            fw = new FileWriter(Datei);
            DefaultListModel lmodel = (DefaultListModel) jList1.getModel();
            String Zeile = "";

            for (int i = 0, size = lmodel.getSize(); i < size; i++) {
                Zeile = lmodel.getElementAt(i).toString();
                fw.write(Zeile);
                fw.append(System.getProperty("line.separator")); // e.g. "\n"
            }
            lmodel.removeAllElements();
        } catch (IOException e) {
            System.err.println("Konnte Datei nicht erstellen");
        } finally {
            if (fw != null) {
                try {
                    fw.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }

    }

//******************************************************************************
//
//
//
//******************************************************************************
    public int okcancel(String theMessage) {
        int result = JOptionPane.showConfirmDialog((Component) null, theMessage,
                "alert", JOptionPane.YES_NO_OPTION);
        return result;
    }

//******************************************************************************
//
//
//
//******************************************************************************
    public String saveAs(String Dateiname) {

        JFileChooser chooser;
        if (Dateiname == null) {
            Dateiname = System.getProperty("user.home");
        }

        chooser = new JFileChooser(Dateiname);
        chooser.setDialogType(JFileChooser.SAVE_DIALOG);
        FileNameExtensionFilter plainFilter = new FileNameExtensionFilter(
                "Plaintext: txt", "txt");
        // FileNameExtensionFilter markUpFilter = new FileNameExtensionFilter(
        //         "Markup: xml, htm, html", "xml", "html", "htm");
        chooser.removeChoosableFileFilter(chooser.getAcceptAllFileFilter());
        chooser.setFileFilter(plainFilter);
        //chooser.setFileFilter(markUpFilter);
        chooser.setDialogTitle("Speichern unter...");
        chooser.setSelectedFile(new File(Dateiname));
        chooser.setVisible(true);

        int result = chooser.showSaveDialog(this);

        if (result == JFileChooser.APPROVE_OPTION) {
            Dateiname = chooser.getSelectedFile().toString();

        }
        chooser.setVisible(false);
        return Dateiname;
    }

//******************************************************************************
//
//
//
//******************************************************************************
    private Vector getFeldnamen() {
        Vector FName = new Vector<String>();
        btnEditTabelle.setEnabled(true);

        for (int row = 0; row <= jTable2.getRowCount() - 1; row++) {
            String name = (String) jTable2.getValueAt(row, 1);
            if ((boolean) jTable2.getValueAt(row, 0) == true) {
                FName.add(name);
            } else {
                btnEditTabelle.setEnabled(false);
            }

        }

        return FName;
    }
//******************************************************************************
//
//
//
//******************************************************************************

    private void LadeTabelle() {
        String TabellenName = jTable1.getModel().getValueAt(jTable1.getSelectedRow(), 0).toString();
        String TabellenBezeichnung = jTable1.getModel().getValueAt(jTable1.getSelectedRow(), 1).toString();
        jLabel1.setText(String.format("<html><b>%s</b> %s</html>", TabellenName, TabellenBezeichnung));
        LogInfo("Lade " + TabellenName + " " + TabellenBezeichnung);
        AS400Tabellenname = TabellenName;
        jTextField3.setText(AS400Tabellenname);

        LadeTabellenstrucktur(TabellenName);
        LadeTabellenDaten(TabellenName, jTextField1.getText());
        TableDesign(jTable2);
    }
//******************************************************************************
//
//
//
//******************************************************************************

    private void findTable(String Tablename) {
        jTextField3.setText(AS400Tabellenname);
        String value = Tablename.trim().toUpperCase();
        for (int row = 0; row <= jTable1.getRowCount() - 1; row++) {
            for (int col = 0; col <= jTable1.getColumnCount() - 1; col++) {
                if (value.equals(jTable1.getValueAt(row, col))) {
                    jTable1.scrollRectToVisible(jTable1.getCellRect(row, 0, true));
                    jTable1.setRowSelectionInterval(row, row);
                }
            }
        }
        LadeDatenTabelle();
    }

//******************************************************************************
//
//
//
//******************************************************************************
    private String findType(String Feldname) {
        String s = "";
        String value = Feldname.trim().toUpperCase();
        for (int row = 0; row <= jTable2.getRowCount() - 1; row++) {
            if (value.equals(jTable2.getValueAt(row, 1))) {
                s = jTable2.getValueAt(row, 2).toString();
            }
        }

        return s;
    }

    private String getTypebeschreibung(String Feldname) {
        String s1 = Feldname;
        String s = "";
        String value = Feldname.trim().toUpperCase();
        for (int row = 0; row <= jTable2.getRowCount() - 1; row++) {
            if (value.equals(jTable2.getValueAt(row, 1))) {
                Integer len = (Integer) jTable2.getValueAt(row, 3);
                Integer dec = (Integer) jTable2.getValueAt(row, 4);
                s = jTable2.getValueAt(row, 2).toString();
                if (dec == null) {
                    s1 += " " + s + " " + len.toString();
                } else {
                    s1 += " " + s + " " + len.toString() + " " + dec.toString();
                }

            }
        }

        return s1;
    }

//******************************************************************************
//
//
//
//******************************************************************************
    private String getFormat(String Feldname) {
        String s1 = "";
        String s = "";
        String value = Feldname.trim().toUpperCase();
        for (int row = 0; row <= jTable2.getRowCount() - 1; row++) {
            if (value.equals(jTable2.getValueAt(row, 1))) {
                s = jTable2.getValueAt(row, 2).toString();
                if (s.equals("CHAR") || s.equals("TIMESTMP")) {
                    Integer len = (Integer) jTable2.getValueAt(row, 3);
                    for (int i = 0; i < len; i++) {
                        s1 += "A";
                    }
                } else {
                    Integer len = (Integer) jTable2.getValueAt(row, 3);
                    Integer dec = (Integer) jTable2.getValueAt(row, 4);
                    for (int i = 0; i < len - dec; i++) {
                        s1 += "#";
                    }
                    if (dec == 0) {
                    } else {
                        s1 += ".";
                        for (int i = 0; i < dec; i++) {
                            s1 += "#";
                        }
                    }
                }
            }
        }
        return s1;
    }
//******************************************************************************
//
//
//
//******************************************************************************

    private void findSchema(String Schema) {
        jTextField2.setText(AS400Schemaname);
        String value = Schema.trim().toUpperCase();
        String s[] = null;
        for (int row = 0; row <= jComboBox1.getItemCount() - 1; row++) {
            s = ((String) jComboBox1.getItemAt(row)).split(" ");
            if (value.equals(s[1])) {
                jComboBox1.scrollRectToVisible(jTable1.getCellRect(row, 0, true));
                jComboBox1.setSelectedIndex(row);
                break;
            }
        }

        LadeGrid(s[1]);
    }

//******************************************************************************
//
//
//
//******************************************************************************
    public void LadeGrid(String Schema) {
        jTextField2.setText(AS400Schemaname);
        this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        LogInfo("Lade Bib = " + Schema);
        AS400Schemaname = Schema;
        DefaultTableModel lm;
        if (jTextField4.getText().length() > 0) {
          lm = myAS400.getLibraryS(Schema,jTextField4.getText().toUpperCase());
        } else{
          lm = myAS400.getLibrary(Schema);
        }
  
        jTable1.setModel(lm);
        jTable1.setShowGrid(false);
        jTable1.setDefaultRenderer(Object.class, new MyRenderer(jTable1));
        TableDesign(jTable1);
        this.setCursor(Cursor.getDefaultCursor());
        jTextField2.requestFocusInWindow();
        jTextField2.selectAll();
    }
//******************************************************************************
//
//
//
//******************************************************************************

    private void LadeTabellenstrucktur(String TabellenName) {
        //TabellenStructurTableModell lm;
        this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        TabellenStrucktur = myAS400.getTabellenStrucktur(AS400Schemaname, TabellenName);

        jTable2.setModel(TabellenStrucktur);
        jTable2.setDefaultRenderer(Object.class, new MyRenderer(jTable2));
        //  jTable2.getColumnModel().getColumn(0).setCellRenderer(jTable2.getDefaultRenderer(Boolean.class));

        TabellenStrucktur.fireTableDataChanged();
        this.setCursor(Cursor.getDefaultCursor());

    }
    //**************************************************************************
    //
    //
    //
    //**************************************************************************
    private void LadeTabellenDaten(String TabellenName, String Filter) {
        initmyDataTable();
        this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        AS400Tabellenname = TabellenName;

        DefaultTableModel lm;
        
        Integer Anz = myAS400.getTableDataAnz(AS400Schemaname, TabellenName,Filter);
        jLabel2.setText("Anzahl Datensätze : "+Anz.toString());
        lm = myAS400.getTableData(AS400Schemaname, TabellenName, getFeldnamen(), Filter, jCheckBox1.isSelected());
        if (lm == null) {
            LogInfo(myAS400.error);
        } else {
            LogInfo(myAS400.ResulSQLStatement);
            jTable3.setModel(lm);
        }
        this.setCursor(Cursor.getDefaultCursor());
    }
//******************************************************************************
//
//
//
//******************************************************************************

    public static void main(String args[]) throws InterruptedException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(MainFrame.class
//                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(MainFrame.class
//                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(MainFrame.class
//                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(MainFrame.class
//                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
        //</editor-fold>

        int Versionsnummer = 3;

        final SplashJFrame f1 = new SplashJFrame();
        f1.dispose();
        f1.setUndecorated(true);
        f1.setVisible(true);

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    String Version;
                    try {
                        Version = UpdateInfo.getLatestVersion();
                        if (Integer.parseInt(Version) > Versionsnummer) {
                            UpdateDialog UpdateDlg = new UpdateDialog(null, true);
                            UpdateDlg.setVisible(true);
                            if (UpdateDlg.Result == "J") {
                                UpdateInfo.downloadFile();
                                UpdateInfo.launch();
                            }
                            UpdateDlg.dispose();
                        }

                        String s = Version;
                    } catch (Exception ex) {
                        Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    MainFrame frame = new MainFrame(Versionsnummer);
                    frame.dispose();

                    Thread.sleep(3000);

                    frame.setVisible(true);
                    frame.setExtendedState(frame.MAXIMIZED_BOTH);

                    f1.setVisible(false);

                } catch (InterruptedException ex) {
                    Logger.getLogger(MainFrame.class
                            .getName()).log(Level.SEVERE, null, ex);

                }
            }
        });

    }
//******************************************************************************
//
//
//
//******************************************************************************

//******************************************************************************
//
//
//
//******************************************************************************
    private void DatenNeuLaden() {
        LadeTabellenDaten(AS400Tabellenname, jTextField1.getText());
    }

    private void SpeicherUpdate(DefaultTableModel tm) {
        Vector<Vector<Object>> data = new Vector<Vector<Object>>();
        Vector<Vector<Object>> type = new Vector<Vector<Object>>();
        data = tm.getDataVector();
        int maxCol = tm.getColumnCount();
        neuValue = data.get(edtRow).get(edtCol).toString();
        type = TabellenStrucktur.getDataVector();
        String FeldWert = " ";
        String FeldName = " ";
        if (type.get(edtCol).get(2).toString().equals("CHAR") || type.get(edtCol).get(2).toString().equals("TIMESTMP")) {
            neuValue = "'" + neuValue.trim() + "'";
        }

        String UpdateString = "Update " + AS400Schemaname + "/" + AS400Tabellenname + " SET " + tm.getColumnName(edtCol) + " = " + neuValue + " where ";

        // System.out.println("alter Wert = "+tm.getColumnName(edtCol)+" = "+altValue);
        for (int i = 0; i < maxCol; i++) {
            FeldName = tm.getColumnName(i);
            if (i == edtCol) {
                FeldWert = altValue;
            } else {
                FeldWert = data.get(edtRow).get(i).toString();
            }
            String Type = type.get(i).get(2).toString();
            if (Type.equals("CHAR") || Type.equals("TIMESTMP")) {
                if ("".equals(FeldWert.trim())) {
                    FeldWert = "' '";
                } else {
                    FeldWert = "'" + FeldWert.trim() + "'";
                }
            }
            if (i == maxCol - 1) {
                UpdateString += FeldName + " = " + FeldWert;
            } else {
                UpdateString += FeldName + " = " + FeldWert + " and ";
            }
        }

        String error;
        try {
            LogInfo(UpdateString);
            error = myAS400.executeSQL(UpdateString);
            LogInfo(error);

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void DeleteDatenSatz(DefaultTableModel tm) {
        Vector<Vector<Object>> data = new Vector<Vector<Object>>();
        Vector<Vector<Object>> type = new Vector<Vector<Object>>();
        data = tm.getDataVector();
        int selRow = jTable3.getSelectedRow();
        int maxCol = tm.getColumnCount();
//        neuValue = data.get(edtRow).get(edtCol).toString();
        type = TabellenStrucktur.getDataVector();
        String FeldWert = " ";
        String FeldName = " ";
//        if (type.get(edtCol).get(2).toString().equals("CHAR")) {
//            neuValue = "'" + neuValue.trim() + "'";
//        }

        String UpdateString = "Delete from " + AS400Schemaname + "/" + AS400Tabellenname + " where ";

        // System.out.println("alter Wert = "+tm.getColumnName(edtCol)+" = "+altValue);
        for (int i = 0; i < maxCol; i++) {
            FeldName = tm.getColumnName(i);
            FeldWert = data.get(selRow).get(i).toString();
            String Type = type.get(i).get(2).toString();
            if (Type.equals("CHAR") || Type.equals("TIMESTMP")) {
                if ("".equals(FeldWert.trim())) {
                    FeldWert = "' '";
                } else {
                    FeldWert = "'" + FeldWert.trim() + "'";
                }
            }
            if (i == maxCol - 1) {
                UpdateString += FeldName + " = " + FeldWert;
            } else {
                UpdateString += FeldName + " = " + FeldWert + " and ";
            }
        }

        String error;
        try {
            LogInfo(UpdateString);
            error = myAS400.executeSQL(UpdateString);
            LogInfo(error);

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void InsertDaten(DefaultTableModel tm) {
        Vector<Vector<Object>> data = new Vector<Vector<Object>>();
        Vector<Vector<Object>> type = new Vector<Vector<Object>>();
        data = tm.getDataVector();
        int maxCol = tm.getColumnCount();

        type = TabellenStrucktur.getDataVector();
        String FeldWert = " ";
        String FeldName = " ";

        String UpdateString = "INSERT INTO " + AS400Schemaname + "/" + AS400Tabellenname + "(";

        // System.out.println("alter Wert = "+tm.getColumnName(edtCol)+" = "+altValue);
        for (int i = 0; i < maxCol - 1; i++) {
            FeldName = tm.getColumnName(i);
            UpdateString += FeldName + ",";
        }
        FeldName = tm.getColumnName(maxCol - 1);
        UpdateString += FeldName + ") VALUES (";

        for (int i = 0; i < maxCol - 1; i++) {
            String Type = type.get(i).get(2).toString();
            if (Type.equals("CHAR") || Type.equals("TIMESTMP")) {
                FeldWert = "' '";
            } else {
                FeldWert = "0";
            }
            UpdateString += FeldWert + ",";
        }
        String Type = type.get(maxCol - 1).get(2).toString();
        if (Type.equals("CHAR") || Type.equals("TIMESTMP")) {
            FeldWert = "' '";
        } else {
            FeldWert = "0";
        }
        UpdateString += FeldWert + ")";

        String error;
        try {
            LogInfo(UpdateString);
            error = myAS400.executeSQL(UpdateString);
            LogInfo(error);
            DatenNeuLaden();

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private String GetWhere(DefaultTableModel tm) {
        Vector<Vector<Object>> data = new Vector<Vector<Object>>();
        Vector<Vector<Object>> type = new Vector<Vector<Object>>();
        data = tm.getDataVector();
        int maxCol = tm.getColumnCount();
        neuValue = data.get(edtRow).get(edtCol).toString();
        type = TabellenStrucktur.getDataVector();
        String FeldWert = " ";
        String FeldName = " ";
        if (type.get(edtCol).get(2).toString().equals("CHAR") || type.get(edtCol).get(2).toString().equals("TIMESTMP")) {
            neuValue = "'" + neuValue.trim() + "'";
        }

        String UpdateString = "";

        // System.out.println("alter Wert = "+tm.getColumnName(edtCol)+" = "+altValue);
        for (int i = 0; i < maxCol; i++) {
            FeldName = tm.getColumnName(i);
            String Type = type.get(i).get(2).toString();
            if (Type.equals("CHAR") || Type.equals("TIMESTMP")) {
                FeldWert = "' '";
            } else {
                FeldWert = "0";
            }
            if (i == maxCol - 1) {
                UpdateString += FeldName + " = " + FeldWert;
            } else {
                UpdateString += FeldName + " = " + FeldWert + " and ";
            }
        }

        return UpdateString;
    }

//******************************************************************************
//
//
//
//******************************************************************************
    private void initmyDataTable() {
        jTable3 = new myTable();
        jTable3.setEnabled(false);

        JTableHeader header1 = jTable3.getTableHeader();
        header1.addMouseListener(new TableHeaderMouseListener(jTable3));

        jTable3.getDefaultEditor(String.class).addCellEditorListener(
                new CellEditorListener() {
                    public void editingCanceled(ChangeEvent e) {
                        System.out.println("editingCanceled");
                    }

                    public void editingStopped(ChangeEvent e) {
                        //  jTable3.getModel().getValueAt(WIDTH, WIDTH)
                        DefaultTableModel tm = (DefaultTableModel) jTable3.getModel();
                        //Vector<Object> rowData = tm.getDataVector().elementAt(Rowindex);
                        SpeicherUpdate(tm);
                    }

                });

        jTable3.addXXXListener(new myTable.XXXListener() {
            @Override
            public void dispatchXXX(int row, int col, String e) {
                edtCol = col;
                edtRow = row;
                altValue = e;
            }
        });

        jTable3.setDefaultRenderer(Object.class, new MyRenderer(jTable3));

        jTable3.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTable3.setCellEditor(new myTableCellEditor());
        jTable3.setCellSelectionEnabled(true);
        jTable3.setSelectionBackground(new java.awt.Color(255, 255, 0));
        jTable3.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane4.setViewportView(jTable3);
    }

    public class TableHeaderMouseListener extends MouseAdapter {

        private JTable table;

        public TableHeaderMouseListener(JTable table) {
            this.table = table;
        }

        public void mouseClicked(MouseEvent event) {

            SelectText = jTextField1.getText();

            Point point = event.getPoint();
            int column = table.columnAtPoint(point);
            String name = table.getModel().getColumnName(column);
            String Type = findType(name).trim().toUpperCase();

            DialogDatenfeld ddf = new DialogDatenfeld(myMainFrame, true);
            ddf.setParameter(name, Type, getFormat(name), getTypebeschreibung(name));
            ddf.setVisible(true);
            String ws = ddf.getSQL();
            if (!ws.isEmpty()) {
                //String wert = JOptionPane.showInputDialog(name+" = ");
                if (SelectText.length() > 0) {
                    SelectText += " and " + ddf.getSQL();
                } else {
                    SelectText = ddf.getSQL();
                }
            }
            jTextField1.setText(SelectText);

            DatenNeuLaden();
        }
    }
//******************************************************************************
//
//
//
//******************************************************************************

    public class TableHeaderMouseListenerChecket extends MouseAdapter {

        private JTable table;

        public TableHeaderMouseListenerChecket(JTable table) {
            this.table = table;
        }

        public void mouseClicked(MouseEvent event) {
            JTableHeader header = jTable2.getTableHeader();
            if (header.getName() == "[x]") {
                Point point = event.getPoint();
                int column = table.columnAtPoint(point);
                if (column == 0) {
                    for (int row = 0; row <= table.getRowCount() - 1; row++) {
                        table.setValueAt(true, row, 0);
                    }
                }
                header.setName("[ ]");
            } else {
                Point point = event.getPoint();
                int column = table.columnAtPoint(point);
                if (column == 0) {
                    for (int row = 0; row <= table.getRowCount() - 1; row++) {
                        table.setValueAt(false, row, 0);
                    }
                }
                header.setName("[x]");
            }

        }
    }

    public void LogInfo(String Info) {
        SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");
        String uhrzeit = sdf.format(new Date());
        listenModell.addElement(uhrzeit + " " + Info);

        jList1.setModel(listenModell);

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddData;
    private javax.swing.JToggleButton btnEditTabelle;
    private javax.swing.JToggleButton btnSelectData;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JList jList1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu jMenueVersion;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane3;
    private javax.swing.JSplitPane jSplitPane4;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    // End of variables declaration//GEN-END:variables

}
